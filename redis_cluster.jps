_info : 'https://docs.cloudscripting.com/6.1.2/'
version: 6.1.2
type: install
name: 'Redis Cluster'
id: 'Redis_cluster'
homepage: https://github.com/layershift/jps_redis_cluster
baseUrl: https://raw.githubusercontent.com/layershift/jps_redis_cluster/main
logo: /images/Redis_cluster.png?_r=${fn.random}

categories:
 - apps/others

description:
  short: Easy way to deploy Redis Cluster configuration

globals:
  pass: ${settings.redisClusterPassword}

settings:
  fields:
    - type: radiolist
      caption: Installation Mode
      name: mode
      default: newEnv
      columns: 2
      values:
        - caption: New Environment
          value: newEnv

        - caption: Existing Environment
          value: existingEnv
      showIf:
      #Settings for creating a new Environment
        newEnv:
          - caption: Environment
            type: envname
            name: envName
            dependsOn: region
          - caption: Region
            type: regionlist
            name: region
            disableInactive: true
            selectFirstAvailable: true
      #Settings for selecting current Environment
        existingEnv:
          - caption: Environment
            type: envlist
            name: envName
            valueField: shortdomain
    - caption: Number of nodes
      type: spinner
      name: redis_nodes
      increment: 0
      default: 6
      min: 6
      hidden: false
    - caption: Cloudlets
      type: spinner
      name: cldts
      increment: 2
      default: 10
      min: 4
    - caption: Public IP
      type: checkbox
      name: public_ip
      default: false
      hidden : true

    - name: redisClusterPassword
      caption: Cluster Password
      type: string
      value: 
      hidden: true

    - caption: First master Port Number
      type: spinner
      name: fm
      increment: 1
      default: 7000
      min: 1
      hidden: true
    - caption: second master Port Number
      type: spinner
      name: sm
      increment: 1
      default: 7001
      min: 1
      hidden: true
    - caption: third master Port Number
      type: spinner
      name: tm
      increment: 1
      default: 7002
      min: 1
      hidden: true
    - caption: First slave Port Number
      type: spinner
      name: fs
      increment: 1
      default: 7003
      min: 1
      hidden: true
    - caption: second slave Port Number
      type: spinner
      name: ss
      increment: 1
      default: 7004
      min: 1
      hidden: true
    - caption: third slave Port Number
      type: spinner
      name: ts
      increment: 1
      default: 7005
      min: 1  
      hidden: true

onInstall:
  - if ( "${globals.pass}" == "" ):
      setGlobals:
        pass: ${fn.password}

  # Create appropriate environment with settings selected in previous screen
  - if (settings.mode == 'newEnv'):
      install:
        envName: ${settings.envName}
        region: ${settings.region}
        jps:
         type: install
         name: Redis Cluster
         nodes:
            - nodeType: redis
              displayName: Redis Nodes
              flexibleCloudlets: ${settings.cldts}
              count: ${settings.redis_nodes}
              nodeGroup: redis_nodes
              if ( ${settings.public_ip} == true ):
                extip: true
              skipNodeEmails: true
              isResetServicePassword: false
              env:
                ADMINPANEL_ENABLED: false
  #Add nodes to the Environment previously selected
  - if (settings.mode == 'existingEnv'): 
      install:
        envName: ${settings.envName}
        jps:
          type: update
          name: add nodes
          onInstall:
            node:
              nodeType: redis
              fixedCloudlets: 1
              flexibleCloudlets: ${settings.cldts}
              nodeGroup: redis_nodes
              password: ${globals.pass}
              options:
                skipNodeEmails: true
              metadata:
                dockerEnvVars:
                  ADMINPANEL_ENABLED: false
            script: |               
              return { result: 0, onAfterReturn: { 'env.control.AddNode': Array(${settings.redis_nodes}).fill(JSON.parse(node)) } }

  # Once the nodes are added, it will install the Redis_ckuster package that configures the 6 Redis nodes into a cluster
  - install: 
      jps: ${baseUrl}/scripts/cluster.jps
      envName: ${settings.envName}
      nodeGroup: redis_nodes
      settings:
        redisClusterPassword: ${globals.pass}      

  # pupulate the nodes variable because this JPS is not aware of it. Actual node creation is done in called JPS
  - initGlobals:
      envName: ${settings.envName}
      namespaceNodes: nodes
      namespaceEnv: env

  - env.control.ApplyNodeGroupData [redis_nodes]:
      envName: ${settings.envName}
      data: 
        isResetServicePassword: false
        adminUrl: https://developer:${globals.pass}@node${globals.nodes.redis_nodes[0].id}-${globals.env.domain}/connect/

success: texts/success.md

actions:
  initGlobals:
    envName: ${this.envName}
    namespaceNodes: ${this.namespaceNodes}
    namespaceEnv: ${this.namespaceEnv}
    script: |
      let nodes = {}, resp = api.env.control.GetEnvInfo(envName, session)
      if (resp.result != 0) return resp
      
      resp.nodes.sort((node1, node2) => node1.id - node2.id)

      for (let node of resp.nodes) {
        nodes[node.nodeGroup] = nodes[node.nodeGroup] || []
        nodes[node.nodeGroup].push(node)
      }

      let globals = {}
      globals[namespaceNodes] = nodes
      globals[namespaceEnv] = resp.env
      globals['settings'] = ${settings}

      return { result: 0, onAfterReturn: { setGlobals: globals } }
