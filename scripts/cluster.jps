_info : 'https://docs.cloudscripting.com/6.1.2/'
version: 6.1.2
type: update
name: 'Redis Cluster'
id: 'redis_cluster'
homepage: https://github.com/layershift/jps_redis_cluster
baseUrl: https://raw.githubusercontent.com/layershift/jps_redis_cluster/main
logo: /images/Redis_cluster.png?_r=${fn.random}
description:
  short: Redis Cluster is configured.

targetNodes:
  nodeGroup: 'redis_nodes'

globals:
  pass: ${settings.redisClusterPassword}

buttons:
- menu :
  - confirmText: Do you want to see the cluster password?
    caption: Show Cluster Password
    action: showClusterPassword
    loadingText: Checking...

  - confirmText: Do you want to change the cluster password? The cluster will be offline during the password change!
    caption: Change Cluster Password
    action: changeClusterPassword
    settings: main
    loadingText: Applying...

  - confirmText: Do you want to (re)install Cluster Tools?
    caption: Install ClusterTools
    action: installClusterTools
    successText: Cluster Tools was successfully installed. Please check the add-on for more actions.
    loadingText: Installing...

  - confirmText: |
      Do you want to reinstall the cluster?
      All data stored in the cluster will be lost!
    caption: Rebuild Cluster
    action: doInstall
    loadingText: Installing...

onInstall: doInstall

#onUninstall: uninstall

onAfterRedeployContainer: doInstall

onAfterClone: doInstall

onBeforeAddNode[redis_nodes]:
  stopEvent:
    type: warning
    message: Redis Cluster does not support scaling!

onBeforeRemoveNode[redis_nodes]:
  stopEvent:
    type: warning
    message: Redis Cluster does not support scaling!



settings:
#The port settings are hidden from the customer and are used for the correct configuration
  main:
    fields:
    - name: redisClusterPassword
      caption: Cluster Password
      type: string
      value: 

    - caption: First master Port Number
      type: spinner
      name: fm
      increment: 1
      default: 7000
      min: 1
      hidden: true
    - caption: second master Port Number
      type: spinner
      name: sm
      increment: 1
      default: 7001
      min: 1
      hidden: true
    - caption: third master Port Number
      type: spinner
      name: tm
      increment: 1
      default: 7002
      min: 1
      hidden: true
    - caption: First slave Port Number
      type: spinner
      name: fs
      increment: 1
      default: 7003
      min: 1
      hidden: true
    - caption: second slave Port Number
      type: spinner
      name: ss
      increment: 1
      default: 7004
      min: 1
      hidden: true
    - caption: third slave Port Number
      type: spinner
      name: ts
      increment: 1
      default: 7005
      min: 1  
      hidden: true
    
actions:
  doInstall:
  #Set ranadom password if global pass is empty
    - if ("${globals.pass}" == ""):
        setGlobals:
          pass: ${fn.password}
  # cleanup any previous cluster files
    - doUninstall:
  #Open firewall ports from 7000-7005 and 17000-17005
  #These ports are only opened for the internal IP of the nodes
    - set-firewall
    - set-firewall-cluster
  #Create configuration files for redis cluster
    - cmd [redis_nodes]:
      - touch /etc/redis/ips.txt
      - chown jelastic /etc/redis/ips.txt
      user: root
    - cmd [redis_nodes]:
      - touch /etc/redis/redis_cluster.conf
      - chown jelastic /etc/redis/redis_cluster.conf
      user: root
  #Create unique paswword on all 6 redis nodes
    - set_configuration:
  #  - api [redis_nodes]: environment.control.RestartNodes
  #Add confifuration to the files
    - set_port
    - set_port1
    - set_port2
    - set_port3
    - set_port4
    - set_port5
    - config_cluster:
        message: "${nodes.redis_nodes[0].address}:${settings.fm} ${nodes.redis_nodes[1].address}:${settings.sm} ${nodes.redis_nodes[2].address}:${settings.tm} ${nodes.redis_nodes[3].address}:${settings.fs} ${nodes.redis_nodes[4].address}:${settings.ss} ${nodes.redis_nodes[5].address}:${settings.ts} --cluster-replicas 1"
    - api [redis_nodes]: environment.control.restartservices
  #Start redis cluster with the configuration file
    - start_redis_cluster:

    - installClusterTools:

    - return:
        result: success
        message: ${baseUrl}/texts/clusterSuccess.md

#other actions
  set_port :
    - appendFile [${nodes.redis_nodes[0].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.fm}
  set_port1 :
    - appendFile [${nodes.redis_nodes[1].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.sm}
  set_port2 :
    - appendFile [${nodes.redis_nodes[2].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.tm}
  set_port3 :
    - appendFile [${nodes.redis_nodes[3].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.fs}
  set_port4 :
    - appendFile [${nodes.redis_nodes[4].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.ss}
  set_port5 :
    - appendFile [${nodes.redis_nodes[5].id}]:
        path: /etc/redis/redis_cluster.conf
        body: port ${settings.ts}

  config_cluster:
    appendFile [redis_nodes]:
      path: /etc/redis/ips.txt
      body: ${this.message}

  start_redis_cluster:
    nodeId: ${nodes.redis_nodes[0].id}
    cmd : 
      /bin/echo "yes" | /usr/bin/redis-cli --cluster create `cat /etc/redis/ips.txt` -a ${globals.pass}

  set_configuration:
    - appendFile [redis_nodes]:
        path: /etc/redis/redis_cluster.conf
        body: |    
          cluster-enabled yes
          cluster-config-file nodes.conf
          cluster-node-timeout 5000
          protected-mode no
          appendonly yes
          masterauth ${globals.pass}
    - cmd [redis_nodes] :
        - /bin/sed -i 's/requirepass/#requirepass/g' /etc/redis.conf
        - /bin/sed -i 's/include \/etc\/redis\/redis_cluster.conf//g' /etc/redis.conf
        - /bin/echo "requirepass ${globals.pass}" >> /etc/redis.conf
        - /bin/echo "include /etc/redis/redis_cluster.conf" >> /etc/redis.conf
        - sleep 5
      user: root


  doUninstall:
    - cmd [redis_nodes] :
        - jem service stop || true
        - rm -f /etc/redis/ips.txt
        - echo "" > /etc/redis/redis_cluster.conf
        - rm -f /var/lib/redis/nodes.conf
        - rm -f /var/lib/redis/appendonly.aof
        - rm -f /var/lib/redis/dump.rdb
        - jem service start || true
      user: root
    - api [redis_nodes]: environment.control.restartservices
    - script: |
        var resp = api.env.security.GetRules("${env.name}", session);
        var rules = resp.rules;
        for (var i = 0, n = rules.length; i < n; i++) {
          if (rules[i].name == "Redis Server" || rules[i].name == "Redis Cluster") {
            var deleted = api.env.security.RemoveRule("${env.name}", session, rules[i].id);
            api.marketplace.console.WriteLog("Deleted: " + rules[i].id + " " + deleted);
          }
        }
        return { 'result': 0 };

  set-firewall:
    api[redis_nodes]:
      - method: environment.security.addrule
        params:
        rule: {
          action: "ALLOW",
          direction: "INPUT",
          name: "Redis server",
          src: "ALL",
          ports: "7000-7005"
          }
  set-firewall-cluster:
      api[redis_nodes]:
        - method: environment.security.addrule
          params:
            rule: {
              action: "ALLOW",
              direction: "INPUT",
              name: "Redis Cluster",
              src: "${nodes.redis_nodes[0].address},${nodes.redis_nodes[1].address},${nodes.redis_nodes[2].address},${nodes.redis_nodes[3].address},${nodes.redis_nodes[4].address},${nodes.redis_nodes[5].address}",
              ports: "17000-17005"
              }
  
  showClusterPassword: 
    - message: "Cluster password is ${settings.redisClusterPassword:[globals.pass]}"
      script: |
        return {'result': 'success', 'message': message.replace(/\n/g, '  \n')}
  
  installClusterTools:
    - install: 
        jps: ${baseUrl}/scripts/clusterTools.jps
        envName: ${env.envName}      
        settings:
          redisClusterPassword: ${globals.pass}

  changeClusterPassword:
    - if ("${settings.redisClusterPassword}" == ""):
        setGlobals:
          pass: ${fn.password}
    - else:
        setGlobals:
          pass: ${settings.redisClusterPassword}

    - cmd[redis_nodes]:
        - jem service stop
        - sed "s#requirepass.*#requirepass ${globals.pass}#g" -i /etc/redis.conf
        - sed "s#masterauth.*#masterauth ${globals.pass}#g" -i /etc/redis/redis_cluster.conf
        - jem service start
      user: root
    - installClusterTools:

    - return:
        result: success
        message: ${baseUrl}/texts/clusterSuccess.md
